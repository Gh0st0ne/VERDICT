package iml.verdict;

import iml.utils.*;

type AttributeType enum { Int, Real, Bool, String };

type GenericAttribute {
	name: String;
	atype: AttributeType;
	value: String;
};

type PortMode enum { In, Out };

type Port {
	name: Identifier;
	mode: PortMode;
	is_event: Bool;
	ptype: Option<DataType>;
	probe: Bool;
};

type ComponentType {
	name: Identifier;
	ports: ArrayList<Port>;
	compCateg: Option<String>;
    contract: Option<ContractSpec>;
    cyber_relations: ArrayList<CyberRel>;
    safety_relations: ArrayList<SafetyRel>;
    safety_events: ArrayList<SafetyEvent>;
};

type ComponentImplKind enum { Block_Impl, Dataflow_Impl };

type ComponentInstanceKind enum { Specification, Implementation };

type ComponentInstance {
	name: Identifier;
	kind: ComponentInstanceKind;
	specification: ComponentType;
	implementation: ComponentImpl;
	attributes: ArrayList<GenericAttribute>;
};

type ConnectionEndKind enum { ComponentCE, SubcomponentCE };

type CompInstPort {
	subcomponent: ComponentInstance;	
	port: Port;
};

type ConnectionEnd {
	kind: ConnectionEndKind;
	component_port: Port;
	subcomponent_port: CompInstPort;
};

type Connection {
	name: Identifier;
	attributes: ArrayList<GenericAttribute>;
	source: ConnectionEnd;
	destination: ConnectionEnd;
};

type BlockImpl {
	subcomponents: ArrayList<ComponentInstance>;
	connections: ArrayList<Connection>; 
};

type ComponentImpl {
	name: Identifier;
	ctype: ComponentType;
	kind: ComponentImplKind;
	block_impl: BlockImpl;
	dataflow_impl: NodeBody;
};

type CIA enum {Confidentiality, Integrity, Availability};

type Severity enum {None, Minor, Major, Hazardous, Catastrophic};

type CIAPort {
	name: String;
	cia: CIA;
};

type CyberExprKind enum {Port, And, Or, Not};

type CyberExpr {
	kind: CyberExprKind;
	port: CIAPort;
	and: ArrayList<CyberExpr>;
	or: ArrayList<CyberExpr>;
	not: CyberExpr;
};

type CyberReq {
    id: String;
    cia: CIA;
    severity: Severity;
    condition: CyberExpr;
    comment: Option<String>;
    description : Option<String>;
    phases : Option<String>;
    extern : Option<String>;
};


type CyberRel {
    id : String;
    output : CIAPort;
    inputs : Option<CyberExpr>;
    comment: Option<String>;
    description : Option<String>;
    phases : Option<String>;
    extern : Option<String>;
};

type SafetyExprKind enum {Port, Fault, And, Or, Not};

type IA enum {Integrity, Availability};

type IAPort {
	name: String;
	ia: IA;
};

type SafetyExpr {
	kind: SafetyExprKind;
	port: IAPort;
	fault: String;
	and: ArrayList<SafetyExpr>;
	or: ArrayList<SafetyExpr>;
	not: SafetyExpr;
};

type SafetyReq {
	id: String;
	condition: SafetyExpr;
	targetProbability: Option<String>;
	comment: Option<String>;
    description : Option<String>;
};

type SafetyRel {
	id: String;
	output: IAPort;
	faultSrc: Option<SafetyExpr>;
	comment: Option<String>;
    description : Option<String>;
};

type SafetyEvent {
	id: String;
	probability: String;
	comment: Option<String>;
    description : Option<String>;
};

type Mission {
    id : String;
    description : Option<String>;
    comment : Option<String>;
    reqs : ArrayList<String>;
}

type ThreatExprKind enum
    {Equal, Contains, Forall, Exists, Implies, Or, And, Not};

type ThreatIntro {
    var_name : String;
    var_type : String;
}

type ThreatVarPair {
    left : ArrayList<String>;
    right : ArrayList<String>;
}

type ThreatQuantifier {
    intro : ThreatIntro;
    expr : ThreatExpr;
}

type ThreatImplies {
    antecedent : ThreatExpr;
    consequent : ThreatExpr;
}

type ThreatExpr {
    kind : ThreatExprKind;
    equal : ThreatVarPair;
    contains : ThreatVarPair;
    forall_val : ThreatQuantifier;
    exists_val : ThreatQuantifier;
    implies_val : ThreatImplies;
    or : ArrayList<ThreatExpr>;
    and : ArrayList<ThreatExpr>;
    not : ThreatExpr;
}

type ThreatModel {
    id : String;
    intro : ThreatIntro;
    expr : ThreatExpr;
    cia : CIA;
    reference : Option<String>;
    assumptions : ArrayList<String>;
    description : Option<String>;
    comment : Option<String>;
}

type ThreatDefense {
    id : String;
    threats : ArrayList<String>;
    description : Option<String>;
    comment : Option<String>;
}

type Model {
	name: Identifier;
	type_declarations: ArrayList<TypeDeclaration>;
	component_types: ArrayList<ComponentType>;
	component_impl: ArrayList<ComponentImpl>;
	dataflow_code: Option<LustreProgram>;
	cyber_requirements: ArrayList<CyberReq>;
	safety_requirements: ArrayList<SafetyReq>;
	missions: ArrayList<Mission>;
	threat_models: ArrayList<ThreatModel>;
	threat_defenses: ArrayList<ThreatDefense>;
};
